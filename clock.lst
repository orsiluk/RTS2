gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 11-24-2016  10:54:07
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 23 2016) (Mac OS X ppc)
                                           ; This file was generated Thu Nov 24 10:54:07 2016
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _strlcpy
                                           	global _current_time_string
                                           	global _debug_display_time
                                           	global _display_time
                                           	global _display_state
                                           	global _blink_time
                                           	global _state2str
                                           	global _current_hours
                                           	global _current_minutes
                                           	global _current_seconds
                                           	global _high_isr
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __moduchar
                                           	extern __divuchar
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _state2str	db	LOW(__str_2), HIGH(__str_2), UPPER(__str_2), LOW(__str_3), HIGH(__str_3), UPPER(__str_3), LOW(__str_4), HIGH(__str_4), UPPER(__str_4), LOW(__str_5), HIGH(__str_5), UPPER(__str_5)
                                           	db	LOW(__str_6), HIGH(__str_6), UPPER(__str_6), LOW(__str_7), HIGH(__str_7), UPPER(__str_7), LOW(__str_8), HIGH(__str_8), UPPER(__str_8), LOW(__str_9), HIGH(__str_9), UPPER(__str_9)
                                           	db	LOW(__str_10), HIGH(__str_10), UPPER(__str_10), LOW(__str_11), HIGH(__str_11), UPPER(__str_11), LOW(__str_12), HIGH(__str_12), UPPER(__str_12), LOW(__str_13), HIGH(__str_13), UPPER(__str_13)
                                           	db	LOW(__str_14), HIGH(__str_14), UPPER(__str_14), LOW(__str_15), HIGH(__str_15), UPPER(__str_15), LOW(__str_16), HIGH(__str_16), UPPER(__str_16), LOW(__str_17), HIGH(__str_17), UPPER(__str_17)
                                           	db	LOW(__str_18), HIGH(__str_18), UPPER(__str_18)
                                           _current_hours	db	0x00
                                           _current_minutes	db	0x00
                                           _current_seconds	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_clock_0	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           udata_clock_1	udata
                                           _current_time_string_string_1_1	res	16
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_clock_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   ef52     goto	0x14a4              	GOTO	_high_isr
00000a   f00a
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_clock__main	code
                                           _main:
                                           ;	.line	304; clock.c	LED0_TRIS = 0; //configure 1st led pin as output (yellow)
000f3a   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	305; clock.c	LED1_TRIS = 0; //configure 2nd led pin as output (red)
000f3c   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	306; clock.c	LED2_TRIS = 0; //configure 3rd led pin as output (red)
000f3e   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	308; clock.c	BUTTON0_TRIS = 1; //configure button0 as input
000f40   8693     bsf	0x93, 0x3, 0         	BSF	_TRISBbits, 3
                                           ;	.line	309; clock.c	BUTTON1_TRIS = 1; //configure button1 as input
000f42   8293     bsf	0x93, 0x1, 0         	BSF	_TRISBbits, 1
                                           ;	.line	339; clock.c	TMR0H=(0xFF00 & ticks_per_sec)>>8;
000f44   0e5f     movlw	0x5f               	MOVLW	0x5f
000f46   6ed7     movwf	0xd7, 0            	MOVWF	_TMR0H
                                           ;	.line	340; clock.c	TMR0L=(0x00FF & ticks_per_sec);
000f48   0e5e     movlw	0x5e               	MOVLW	0x5e
000f4a   6ed6     movwf	0xd6, 0            	MOVWF	_TMR0L
                                           ;	.line	343; clock.c	T0CONbits.TMR0ON = 0; //stop timer
000f4c   9ed5     bcf	0xd5, 0x7, 0         	BCF	_T0CONbits, 7
                                           ;	.line	344; clock.c	T0CONbits.T08BIT = 0;  //16bit
000f4e   9cd5     bcf	0xd5, 0x6, 0         	BCF	_T0CONbits, 6
                                           ;	.line	345; clock.c	T0CONbits.T0CS = 0;   //Clock source = instruction cycle CLK
000f50   9ad5     bcf	0xd5, 0x5, 0         	BCF	_T0CONbits, 5
                                           ;	.line	346; clock.c	T0CONbits.T0SE = 0;   //Rising edge
000f52   98d5     bcf	0xd5, 0x4, 0         	BCF	_T0CONbits, 4
                                           ;	.line	347; clock.c	T0CONbits.PSA = 0;    //Assign prescaler
000f54   96d5     bcf	0xd5, 0x3, 0         	BCF	_T0CONbits, 3
                                           ;	.line	349; clock.c	T0CON |= 0x7;
000f56   0e07     movlw	0x7                	MOVLW	0x07
000f58   12d5     iorwf	0xd5, 0x1, 0       	IORWF	_T0CON, F
                                           ;	.line	354; clock.c	INTCONbits.GIE = 1;   //enable global interrupts
000f5a   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	355; clock.c	INTCONbits.TMR0IE=1;  //enable timer0 interrupts
000f5c   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	357; clock.c	INTCON2bits.TMR0IP=1; //TMR0 has high prio
000f5e   84f1     bsf	0xf1, 0x2, 0         	BSF	_INTCON2bits, 2
                                           ;	.line	362; clock.c	T0CONbits.TMR0ON = 1;  //Enable TMR0
000f60   8ed5     bsf	0xd5, 0x7, 0         	BSF	_T0CONbits, 7
                                           ;	.line	364; clock.c	LCDInit();
000f62   ec3b     call	0x276, 0            	CALL	_LCDInit
000f64   f001
                                           ;	.line	365; clock.c	DelayMs(10);
000f66   0e68     movlw	0x68               	MOVLW	0x68
000f68   6e00     movwf	0, 0               	MOVWF	r0x00
000f6a   0e42     movlw	0x42               	MOVLW	0x42
000f6c   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f6e   6a02     clrf	0x2, 0              	CLRF	r0x02
000f70   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00229_DS_:
000f72   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000f74   f004
000f76   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000f78   f005
000f7a   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000f7c   f006
000f7e   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000f80   f007
000f82   0eff     movlw	0xff               	MOVLW	0xff
000f84   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f86   0eff     movlw	0xff               	MOVLW	0xff
000f88   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f8a   0eff     movlw	0xff               	MOVLW	0xff
000f8c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f8e   0eff     movlw	0xff               	MOVLW	0xff
000f90   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000f92   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000f94   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000f96   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000f98   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000f9a   e1eb     bnz	0xf72                	BNZ	_00229_DS_
                                           ;	.line	366; clock.c	LED_PUT(0x00);
000f9c   0ef8     movlw	0xf8               	MOVLW	0xf8
000f9e   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           _00248_DS_:
                                           ;	.line	372; clock.c	LED_PUT(0x02);
000fa0   cf91     movff	0xf91, 0           	MOVFF	_LATJ, r0x00
000fa2   f000
000fa4   0ef8     movlw	0xf8               	MOVLW	0xf8
000fa6   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
000fa8   0e02     movlw	0x2                	MOVLW	0x02
000faa   1000     iorwf	0, 0, 0            	IORWF	r0x00, W
000fac   6e91     movwf	0x91, 0            	MOVWF	_LATJ
                                           ;	.line	373; clock.c	DelayMs(100);
000fae   0e10     movlw	0x10               	MOVLW	0x10
000fb0   6e00     movwf	0, 0               	MOVWF	r0x00
000fb2   0e98     movlw	0x98               	MOVLW	0x98
000fb4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000fb6   0e02     movlw	0x2                	MOVLW	0x02
000fb8   6e02     movwf	0x2, 0             	MOVWF	r0x02
000fba   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00235_DS_:
000fbc   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000fbe   f004
000fc0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000fc2   f005
000fc4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000fc6   f006
000fc8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000fca   f007
000fcc   0eff     movlw	0xff               	MOVLW	0xff
000fce   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000fd0   0eff     movlw	0xff               	MOVLW	0xff
000fd2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000fd4   0eff     movlw	0xff               	MOVLW	0xff
000fd6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000fd8   0eff     movlw	0xff               	MOVLW	0xff
000fda   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000fdc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fde   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000fe0   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000fe2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000fe4   e1eb     bnz	0xfbc                	BNZ	_00235_DS_
                                           ;	.line	374; clock.c	LED_PUT(0x0);
000fe6   0ef8     movlw	0xf8               	MOVLW	0xf8
000fe8   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           ;	.line	375; clock.c	DelayMs(100);
000fea   0e10     movlw	0x10               	MOVLW	0x10
000fec   6e00     movwf	0, 0               	MOVWF	r0x00
000fee   0e98     movlw	0x98               	MOVLW	0x98
000ff0   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ff2   0e02     movlw	0x2                	MOVLW	0x02
000ff4   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ff6   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00241_DS_:
000ff8   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ffa   f004
000ffc   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ffe   f005
001000   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001002   f006
001004   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
001006   f007
001008   0eff     movlw	0xff               	MOVLW	0xff
00100a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00100c   0eff     movlw	0xff               	MOVLW	0xff
00100e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001010   0eff     movlw	0xff               	MOVLW	0xff
001012   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001014   0eff     movlw	0xff               	MOVLW	0xff
001016   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001018   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00101a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00101c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00101e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001020   e1eb     bnz	0xff8                	BNZ	_00241_DS_
001022   d7be     bra	0xfa0                	BRA	_00248_DS_
001024   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__blink_time	code
                                           _blink_time:
                                           ;	.line	284; clock.c	void blink_time(void)
001268   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00126a   ffe5
00126c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00126e   ffd9
001270   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001272   ffe5
001274   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001276   ffe5
001278   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00127a   ffe5
00127c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00127e   ffe5
001280   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001282   ffe5
001284   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001286   ffe5
001288   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00128a   ffe5
00128c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00128e   ffe5
                                           ;	.line	286; clock.c	DisplayString(16,"");
001290   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
001292   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001294   0e08     movlw	0x8                	MOVLW	HIGH(__str_1)
001296   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001298   0e02     movlw	0x2                	MOVLW	LOW(__str_1)
00129a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00129c   0e10     movlw	0x10               	MOVLW	0x10
00129e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012a0   ec15     call	0xe2a, 0            	CALL	_DisplayString
0012a2   f007
0012a4   0e04     movlw	0x4                	MOVLW	0x04
0012a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	287; clock.c	DelayMs(100);
0012a8   0e10     movlw	0x10               	MOVLW	0x10
0012aa   6e00     movwf	0, 0               	MOVWF	r0x00
0012ac   0e98     movlw	0x98               	MOVLW	0x98
0012ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0012b0   0e02     movlw	0x2                	MOVLW	0x02
0012b2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0012b4   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00218_DS_:
0012b6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0012b8   f004
0012ba   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0012bc   f005
0012be   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0012c0   f006
0012c2   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0012c4   f007
0012c6   0eff     movlw	0xff               	MOVLW	0xff
0012c8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0012ca   0eff     movlw	0xff               	MOVLW	0xff
0012cc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0012ce   0eff     movlw	0xff               	MOVLW	0xff
0012d0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0012d2   0eff     movlw	0xff               	MOVLW	0xff
0012d4   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0012d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0012d8   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0012da   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0012dc   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0012de   e1eb     bnz	0x12b6               	BNZ	_00218_DS_
                                           ;	.line	288; clock.c	display_time();
0012e0   ec31     call	0x1662, 0           	CALL	_display_time
0012e2   f00b
0012e4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0012e6   f007
0012e8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0012ea   f006
0012ec   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0012ee   f005
0012f0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0012f2   f004
0012f4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0012f6   f003
0012f8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0012fa   f002
0012fc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0012fe   f001
001300   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001302   f000
001304   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001306   ffd9
001308   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_state	code
                                           _display_state:
                                           ;	.line	277; clock.c	void display_state(FSM_STATE state)
0013a2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0013a4   ffe5
0013a6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0013a8   ffd9
0013aa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0013ac   ffe5
0013ae   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0013b0   ffe5
0013b2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0013b4   ffe5
0013b6   0e02     movlw	0x2                	MOVLW	0x02
0013b8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0013ba   f000
                                           ;	.line	279; clock.c	DisplayString(0,"                ");
0013bc   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
0013be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013c0   0e07     movlw	0x7                	MOVLW	HIGH(__str_0)
0013c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013c4   0ef0     movlw	0xf0               	MOVLW	LOW(__str_0)
0013c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013c8   0e00     movlw	0                  	MOVLW	0x00
0013ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013cc   ec15     call	0xe2a, 0            	CALL	_DisplayString
0013ce   f007
0013d0   0e04     movlw	0x4                	MOVLW	0x04
0013d2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ; ;multiply lit val:0x03 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	280; clock.c	DisplayString(0,state2str[state]);
0013d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013d6   0d03     mullw	0x3                	MULLW	0x03
0013d8   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0013da   f000
0013dc   6a01     clrf	0x1, 0              	CLRF	r0x01
0013de   0e00     movlw	0                  	MOVLW	LOW(_state2str)
0013e0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0013e2   0e0f     movlw	0xf                	MOVLW	HIGH(_state2str)
0013e4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0013e6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0013e8   ffe9
0013ea   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0013ec   ffea
0013ee   cfee     movff	0xfee, 0           	MOVFF	POSTINC0, r0x00
0013f0   f000
0013f2   cfee     movff	0xfee, 0x1         	MOVFF	POSTINC0, r0x01
0013f4   f001
0013f6   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
0013f8   f002
0013fa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0013fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013fe   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001402   5000     movf	0, 0, 0             	MOVF	r0x00, W
001404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001406   0e00     movlw	0                  	MOVLW	0x00
001408   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00140a   ec15     call	0xe2a, 0            	CALL	_DisplayString
00140c   f007
00140e   0e04     movlw	0x4                	MOVLW	0x04
001410   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001412   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001414   f002
001416   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001418   f001
00141a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00141c   f000
00141e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001420   ffd9
001422   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__display_time	code
                                           _display_time:
                                           ;	.line	272; clock.c	void display_time(void)
001662   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001664   ffe5
001666   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001668   ffd9
00166a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00166c   ffe5
00166e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001670   ffe5
001672   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001674   ffe5
                                           ;	.line	274; clock.c	DisplayString(16, current_time_string());
001676   ec3f     call	0xa7e, 0            	CALL	_current_time_string
001678   f005
00167a   6e00     movwf	0, 0               	MOVWF	r0x00
00167c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00167e   f001
001680   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001682   f002
001684   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001686   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001688   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00168a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00168e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001690   0e10     movlw	0x10               	MOVLW	0x10
001692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001694   ec15     call	0xe2a, 0            	CALL	_DisplayString
001696   f007
001698   0e04     movlw	0x4                	MOVLW	0x04
00169a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00169c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00169e   f002
0016a0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0016a2   f001
0016a4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0016a6   f000
0016a8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0016aa   ffd9
0016ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__debug_display_time	code
                                           _debug_display_time:
                                           ;	.line	263; clock.c	void debug_display_time(void)
0016e6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0016e8   ffe5
0016ea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0016ec   ffd9
0016ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0016f0   ffe5
                                           ;	.line	265; clock.c	LED_PUT(0x00);
0016f2   0ef8     movlw	0xf8               	MOVLW	0xf8
0016f4   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           ;	.line	267; clock.c	display_time();
0016f6   ec31     call	0x1662, 0           	CALL	_display_time
0016f8   f00b
                                           ;	.line	268; clock.c	LED_PUT(0x01);
0016fa   cf91     movff	0xf91, 0           	MOVFF	_LATJ, r0x00
0016fc   f000
0016fe   0ef8     movlw	0xf8               	MOVLW	0xf8
001700   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
001702   0e01     movlw	0x1                	MOVLW	0x01
001704   1000     iorwf	0, 0, 0            	IORWF	r0x00, W
001706   6e91     movwf	0x91, 0            	MOVWF	_LATJ
001708   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00170a   f000
00170c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00170e   ffd9
001710   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__current_time_string	code
                                           _current_time_string:
                                           ;	.line	224; clock.c	char* current_time_string(void)
000a7e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000a80   ffe5
000a82   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000a84   ffd9
000a86   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000a88   ffe5
000a8a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000a8c   ffe5
000a8e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000a90   ffe5
                                           ;	.line	238; clock.c	string[1] += current_hours;
000a92   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00183_DS_:
                                           ;	.line	228; clock.c	for (;i<8;i++)
000a94   0e08     movlw	0x8                	MOVLW	0x08
000a96   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000a98   e20e     bc	0xab6                 	BC	_00186_DS_
                                           ;	.line	229; clock.c	string[i] = '0';
000a9a   0e20     movlw	0x20               	MOVLW	LOW(_current_time_string_string_1_1)
000a9c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000a9e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000aa0   6a02     clrf	0x2, 0              	CLRF	r0x02
000aa2   0e0e     movlw	0xe                	MOVLW	HIGH(_current_time_string_string_1_1)
000aa4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000aa6   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000aa8   ffe9
000aaa   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000aac   ffea
000aae   0e30     movlw	0x30               	MOVLW	0x30
000ab0   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	228; clock.c	for (;i<8;i++)
000ab2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000ab4   d7ef     bra	0xa94                	BRA	_00183_DS_
                                           _00186_DS_:
                                           ;	.line	232; clock.c	if (current_hours > 9)
000ab6   0e0a     movlw	0xa                	MOVLW	0x0a
000ab8   010f     movlb	0xf                	BANKSEL	_current_hours
000aba   5d33     subwf	0x33, 0, 0x1       	SUBWF	_current_hours, W, B
000abc   e31f     bnc	0xafc                	BNC	_00175_DS_
                                           ;	.line	234; clock.c	string[1] += current_hours % 10;
000abe   0e0a     movlw	0xa                	MOVLW	0x0a
000ac0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ac2   cf33     movff	0xf33, 0xfe5       	MOVFF	_current_hours, POSTDEC1
000ac4   ffe5
000ac6   ec8f     call	0x151e, 0           	CALL	__moduchar
000ac8   f00a
000aca   6e00     movwf	0, 0               	MOVWF	r0x00
000acc   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000ace   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000ad0   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 1)
000ad2   5121     movf	0x21, 0, 0x1        	MOVF	(_current_time_string_string_1_1 + 1), W, B
000ad4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000ad6   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ad8   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 1)
000ada   6f21     movwf	0x21, 0x1          	MOVWF	(_current_time_string_string_1_1 + 1), B
                                           ;	.line	235; clock.c	string[0] += current_hours/10;
000adc   0e0a     movlw	0xa                	MOVLW	0x0a
000ade   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ae0   cf33     movff	0xf33, 0xfe5       	MOVFF	_current_hours, POSTDEC1
000ae2   ffe5
000ae4   ecc9     call	0x1592, 0           	CALL	__divuchar
000ae6   f00a
000ae8   6e00     movwf	0, 0               	MOVWF	r0x00
000aea   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000aec   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000aee   010e     movlb	0xe                	BANKSEL	_current_time_string_string_1_1
000af0   5120     movf	0x20, 0, 0x1        	MOVF	_current_time_string_string_1_1, W, B
000af2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000af4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000af6   010e     movlb	0xe                	BANKSEL	_current_time_string_string_1_1
000af8   6f20     movwf	0x20, 0x1          	MOVWF	_current_time_string_string_1_1, B
000afa   d008     bra	0xb0c                	BRA	_00176_DS_
                                           _00175_DS_:
                                           ;	.line	238; clock.c	string[1] += current_hours;
000afc   cf33     movff	0xf33, 0           	MOVFF	_current_hours, r0x00
000afe   f000
000b00   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 1)
000b02   5121     movf	0x21, 0, 0x1        	MOVF	(_current_time_string_string_1_1 + 1), W, B
000b04   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b06   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b08   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 1)
000b0a   6f21     movwf	0x21, 0x1          	MOVWF	(_current_time_string_string_1_1 + 1), B
                                           _00176_DS_:
                                           ;	.line	240; clock.c	string[2] = ':';
000b0c   0e3a     movlw	0x3a               	MOVLW	0x3a
000b0e   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 2)
000b10   6f22     movwf	0x22, 0x1          	MOVWF	(_current_time_string_string_1_1 + 2), B
                                           ;	.line	242; clock.c	if (current_minutes > 9)
000b12   0e0a     movlw	0xa                	MOVLW	0x0a
000b14   010f     movlb	0xf                	BANKSEL	_current_minutes
000b16   5d34     subwf	0x34, 0, 0x1       	SUBWF	_current_minutes, W, B
000b18   e31f     bnc	0xb58                	BNC	_00178_DS_
                                           ;	.line	244; clock.c	string[4] += current_minutes % 10;
000b1a   0e0a     movlw	0xa                	MOVLW	0x0a
000b1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b1e   cf34     movff	0xf34, 0xfe5       	MOVFF	_current_minutes, POSTDEC1
000b20   ffe5
000b22   ec8f     call	0x151e, 0           	CALL	__moduchar
000b24   f00a
000b26   6e00     movwf	0, 0               	MOVWF	r0x00
000b28   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000b2a   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000b2c   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 4)
000b2e   5124     movf	0x24, 0, 0x1        	MOVF	(_current_time_string_string_1_1 + 4), W, B
000b30   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b32   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b34   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 4)
000b36   6f24     movwf	0x24, 0x1          	MOVWF	(_current_time_string_string_1_1 + 4), B
                                           ;	.line	245; clock.c	string[3] += current_minutes/10;
000b38   0e0a     movlw	0xa                	MOVLW	0x0a
000b3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b3c   cf34     movff	0xf34, 0xfe5       	MOVFF	_current_minutes, POSTDEC1
000b3e   ffe5
000b40   ecc9     call	0x1592, 0           	CALL	__divuchar
000b42   f00a
000b44   6e00     movwf	0, 0               	MOVWF	r0x00
000b46   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000b48   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000b4a   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 3)
000b4c   5123     movf	0x23, 0, 0x1        	MOVF	(_current_time_string_string_1_1 + 3), W, B
000b4e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b50   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b52   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 3)
000b54   6f23     movwf	0x23, 0x1          	MOVWF	(_current_time_string_string_1_1 + 3), B
000b56   d008     bra	0xb68                	BRA	_00179_DS_
                                           _00178_DS_:
                                           ;	.line	248; clock.c	string[4] += current_minutes;
000b58   cf34     movff	0xf34, 0           	MOVFF	_current_minutes, r0x00
000b5a   f000
000b5c   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 4)
000b5e   5124     movf	0x24, 0, 0x1        	MOVF	(_current_time_string_string_1_1 + 4), W, B
000b60   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b62   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b64   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 4)
000b66   6f24     movwf	0x24, 0x1          	MOVWF	(_current_time_string_string_1_1 + 4), B
                                           _00179_DS_:
                                           ;	.line	250; clock.c	string[5] = '.';
000b68   0e2e     movlw	0x2e               	MOVLW	0x2e
000b6a   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 5)
000b6c   6f25     movwf	0x25, 0x1          	MOVWF	(_current_time_string_string_1_1 + 5), B
                                           ;	.line	252; clock.c	if (current_seconds > 9)
000b6e   0e0a     movlw	0xa                	MOVLW	0x0a
000b70   010f     movlb	0xf                	BANKSEL	_current_seconds
000b72   5d35     subwf	0x35, 0, 0x1       	SUBWF	_current_seconds, W, B
000b74   e31f     bnc	0xbb4                	BNC	_00181_DS_
                                           ;	.line	254; clock.c	string[7] += current_seconds % 10;
000b76   0e0a     movlw	0xa                	MOVLW	0x0a
000b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b7a   cf35     movff	0xf35, 0xfe5       	MOVFF	_current_seconds, POSTDEC1
000b7c   ffe5
000b7e   ec8f     call	0x151e, 0           	CALL	__moduchar
000b80   f00a
000b82   6e00     movwf	0, 0               	MOVWF	r0x00
000b84   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000b86   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000b88   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 7)
000b8a   5127     movf	0x27, 0, 0x1        	MOVF	(_current_time_string_string_1_1 + 7), W, B
000b8c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b90   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 7)
000b92   6f27     movwf	0x27, 0x1          	MOVWF	(_current_time_string_string_1_1 + 7), B
                                           ;	.line	255; clock.c	string[6] += current_seconds/10;
000b94   0e0a     movlw	0xa                	MOVLW	0x0a
000b96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b98   cf35     movff	0xf35, 0xfe5       	MOVFF	_current_seconds, POSTDEC1
000b9a   ffe5
000b9c   ecc9     call	0x1592, 0           	CALL	__divuchar
000b9e   f00a
000ba0   6e00     movwf	0, 0               	MOVWF	r0x00
000ba2   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000ba4   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000ba6   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 6)
000ba8   5126     movf	0x26, 0, 0x1        	MOVF	(_current_time_string_string_1_1 + 6), W, B
000baa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bac   5000     movf	0, 0, 0             	MOVF	r0x00, W
000bae   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 6)
000bb0   6f26     movwf	0x26, 0x1          	MOVWF	(_current_time_string_string_1_1 + 6), B
000bb2   d008     bra	0xbc4                	BRA	_00182_DS_
                                           _00181_DS_:
                                           ;	.line	258; clock.c	string[7] += current_seconds;
000bb4   cf35     movff	0xf35, 0           	MOVFF	_current_seconds, r0x00
000bb6   f000
000bb8   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 7)
000bba   5127     movf	0x27, 0, 0x1        	MOVF	(_current_time_string_string_1_1 + 7), W, B
000bbc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000bbe   5000     movf	0, 0, 0             	MOVF	r0x00, W
000bc0   010e     movlb	0xe                	BANKSEL	(_current_time_string_string_1_1 + 7)
000bc2   6f27     movwf	0x27, 0x1          	MOVWF	(_current_time_string_string_1_1 + 7), B
                                           _00182_DS_:
                                           ;	.line	260; clock.c	return string;
000bc4   0e0e     movlw	0xe                	MOVLW	HIGH(_current_time_string_string_1_1)
000bc6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000bc8   0e20     movlw	0x20               	MOVLW	LOW(_current_time_string_string_1_1)
000bca   6e00     movwf	0, 0               	MOVWF	r0x00
000bcc   0e80     movlw	0x80               	MOVLW	0x80
000bce   6e02     movwf	0x2, 0             	MOVWF	r0x02
000bd0   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
000bd2   fff4
000bd4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000bd6   fff3
000bd8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000bda   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000bdc   f002
000bde   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000be0   f001
000be2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000be4   f000
000be6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000be8   ffd9
000bea   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__high_isr	code
                                           _high_isr:
                                           ;	.line	203; clock.c	void high_isr (void) interrupt 1
0014a4   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
0014a6   ffe5
0014a8   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
0014aa   ffe5
0014ac   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
0014ae   ffe5
0014b0   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
0014b2   ffe5
0014b4   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0014b6   ffe5
0014b8   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0014ba   ffe5
0014bc   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0014be   ffe5
0014c0   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0014c2   ffe5
0014c4   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0014c6   ffe5
0014c8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0014ca   ffe5
0014cc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0014ce   ffd9
0014d0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0014d2   ffe5
                                           ;	.line	205; clock.c	LED_PUT(0x01);
0014d4   cf91     movff	0xf91, 0           	MOVFF	_LATJ, r0x00
0014d6   f000
0014d8   0ef8     movlw	0xf8               	MOVLW	0xf8
0014da   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
0014dc   0e01     movlw	0x1                	MOVLW	0x01
0014de   1000     iorwf	0, 0, 0            	IORWF	r0x00, W
0014e0   6e91     movwf	0x91, 0            	MOVWF	_LATJ
                                           ;	.line	206; clock.c	if(INTCONbits.TMR0IF)  //If TMR0 interrupt
0014e2   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
0014e4   d005     bra	0x14f0               	BRA	_00169_DS_
0014e6   010f     movlb	0xf                	BANKSEL	_current_seconds
                                           ;	.line	208; clock.c	current_seconds++;
0014e8   2b35     incf	0x35, 0x1, 0x1      	INCF	_current_seconds, F, B
                                           ;	.line	209; clock.c	display_time();
0014ea   ec31     call	0x1662, 0           	CALL	_display_time
0014ec   f00b
                                           ;	.line	210; clock.c	INTCONbits.TMR0IF = 0;
0014ee   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00169_DS_:
0014f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0014f2   f000
0014f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0014f6   ffd9
0014f8   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0014fa   fffb
0014fc   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0014fe   fffa
001500   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
001502   ffea
001504   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
001506   ffe9
001508   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00150a   fff4
00150c   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
00150e   fff3
001510   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
001512   ffe0
001514   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
001516   ffd8
001518   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
00151a   ffe8
00151c   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_clock__strlcpy	code
                                           _strlcpy:
                                           ;	.line	170; clock.c	strlcpy(char *dst, const char *src, size_t siz)
0004d2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0004d4   ffe5
0004d6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0004d8   ffd9
0004da   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0004dc   ffe5
0004de   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0004e0   ffe5
0004e2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0004e4   ffe5
0004e6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0004e8   ffe5
0004ea   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0004ec   ffe5
0004ee   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0004f0   ffe5
0004f2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0004f4   ffe5
0004f6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0004f8   ffe5
0004fa   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0004fc   ffe5
0004fe   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000500   ffe5
000502   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000504   ffe5
000506   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000508   ffe5
00050a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00050c   ffe5
00050e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000510   ffe5
000512   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000514   ffe5
000516   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000518   ffe5
00051a   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
00051c   ffe5
00051e   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
000520   ffe5
000522   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
000524   ffe5
000526   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000528   ffe5
00052a   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
00052c   ffe5
00052e   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000530   ffe5
000532   0e02     movlw	0x2                	MOVLW	0x02
000534   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000536   f000
000538   0e03     movlw	0x3                	MOVLW	0x03
00053a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00053c   f001
00053e   0e04     movlw	0x4                	MOVLW	0x04
000540   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000542   f002
000544   0e05     movlw	0x5                	MOVLW	0x05
000546   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000548   f003
00054a   0e06     movlw	0x6                	MOVLW	0x06
00054c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00054e   f004
000550   0e07     movlw	0x7                	MOVLW	0x07
000552   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000554   f005
000556   0e08     movlw	0x8                	MOVLW	0x08
000558   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
00055a   f006
00055c   0e09     movlw	0x9                	MOVLW	0x09
00055e   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000560   f007
                                           ;	.line	172; clock.c	char       *d = dst;
000562   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
000564   f008
000566   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
000568   f009
00056a   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
00056c   f00a
                                           ;	.line	173; clock.c	const char *s = src;
00056e   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
000570   f00b
000572   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
000574   f00c
000576   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
000578   f00d
                                           ;	.line	174; clock.c	size_t      n = siz;
00057a   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
00057c   f00e
00057e   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
000580   f00f
                                           ;	.line	177; clock.c	if (n != 0)
000582   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000584   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000586   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000588   d03e     bra	0x606                	BRA	_00147_DS_
                                           ;	.line	179; clock.c	while (--n != 0)
00058a   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
00058c   f010
00058e   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
000590   f011
000592   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
000594   f012
000596   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
000598   f013
00059a   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
00059c   f014
                                           _00143_DS_:
00059e   0eff     movlw	0xff               	MOVLW	0xff
0005a0   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
0005a2   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0005a4   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
0005a6   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
0005a8   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
0005aa   e01d     bz	0x5e6                 	BZ	_00162_DS_
                                           ;	.line	181; clock.c	if ((*d++ = *s++) == '\0')
0005ac   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
0005ae   ffe9
0005b0   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
0005b2   fff3
0005b4   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0005b6   ec89     call	0x1712, 0           	CALL	__gptrget1
0005b8   f00b
0005ba   6e15     movwf	0x15, 0            	MOVWF	r0x15
0005bc   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
0005be   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0005c0   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
0005c2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0005c4   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
0005c6   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0005c8   ffe5
0005ca   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0005cc   ffe9
0005ce   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0005d0   fff3
0005d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005d4   eca6     call	0x174c, 0           	CALL	__gptrput1
0005d6   f00b
0005d8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0005da   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0005dc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0005de   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0005e0   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0005e2   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0005e4   e1dc     bnz	0x59e                	BNZ	_00143_DS_
                                           _00162_DS_:
                                           ;	.line	182; clock.c	break;
0005e6   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
0005e8   f00b
0005ea   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
0005ec   f00c
0005ee   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
0005f0   f00d
0005f2   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
0005f4   f008
0005f6   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
0005f8   f009
0005fa   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0005fc   f00a
0005fe   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
000600   f00e
000602   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
000604   f00f
                                           _00147_DS_:
                                           ;	.line	187; clock.c	if (n == 0)
000606   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000608   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
00060a   e127     bnz	0x65a                	BNZ	_00154_DS_
                                           ;	.line	189; clock.c	if (siz != 0)
00060c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00060e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000610   e009     bz	0x624                 	BZ	_00161_DS_
                                           ;	.line	190; clock.c	*d = '\0';          /* NUL-terminate dst */
000612   0e00     movlw	0                  	MOVLW	0x00
000614   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000616   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
000618   ffe9
00061a   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00061c   fff3
00061e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000620   eca6     call	0x174c, 0           	CALL	__gptrput1
000622   f00b
                                           _00161_DS_:
                                           ;	.line	191; clock.c	while (*s++)
000624   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
000626   f000
000628   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
00062a   f001
00062c   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
00062e   f002
                                           _00150_DS_:
000630   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000632   ffe9
000634   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000636   fff3
000638   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00063a   ec89     call	0x1712, 0           	CALL	__gptrget1
00063c   f00b
00063e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000640   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000642   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000644   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000646   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000648   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00064a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00064c   e1f1     bnz	0x630                	BNZ	_00150_DS_
00064e   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
000650   f00b
000652   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
000654   f00c
000656   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
000658   f00d
                                           _00154_DS_:
                                           ;	.line	195; clock.c	return (s - src - 1);       /* count does not include NUL */
00065a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00065c   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
00065e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000660   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000662   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
000664   6e04     movwf	0x4, 0             	MOVWF	r0x04
000666   0eff     movlw	0xff               	MOVLW	0xff
000668   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00066a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00066c   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
00066e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000670   fff3
000672   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000674   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
000676   f015
000678   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
00067a   f014
00067c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
00067e   f013
000680   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
000682   f012
000684   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
000686   f011
000688   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00068a   f010
00068c   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
00068e   f00f
000690   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
000692   f00e
000694   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000696   f00d
000698   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00069a   f00c
00069c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00069e   f00b
0006a0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0006a2   f00a
0006a4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0006a6   f009
0006a8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0006aa   f008
0006ac   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0006ae   f007
0006b0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0006b2   f006
0006b4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006b6   f005
0006b8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006ba   f004
0006bc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006be   f003
0006c0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006c2   f002
0006c4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006c6   f001
0006c8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006ca   f000
0006cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0006ce   ffd9
0006d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__DisplayString	code
                                           _DisplayString:
                                           ;	.line	117; clock.c	void DisplayString(BYTE pos, char* text)
000e2a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e2c   ffe5
000e2e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e30   ffd9
000e32   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e34   ffe5
000e36   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e38   ffe5
000e3a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e3c   ffe5
000e3e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e40   ffe5
000e42   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e44   ffe5
000e46   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e48   ffe5
000e4a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e4c   ffe5
000e4e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e50   ffe5
000e52   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e54   ffe5
000e56   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e58   ffe5
000e5a   0e02     movlw	0x2                	MOVLW	0x02
000e5c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e5e   f000
000e60   0e03     movlw	0x3                	MOVLW	0x03
000e62   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000e64   f001
000e66   0e04     movlw	0x4                	MOVLW	0x04
000e68   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000e6a   f002
000e6c   0e05     movlw	0x5                	MOVLW	0x05
000e6e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000e70   f003
                                           ;	.line	119; clock.c	BYTE        l = strlen(text);/*number of actual chars in the string*/
000e72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000e7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e7e   ec12     call	0x1424, 0           	CALL	_strlen
000e80   f00a
000e82   6e04     movwf	0x4, 0             	MOVWF	r0x04
000e84   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
000e86   f005
000e88   0e03     movlw	0x3                	MOVLW	0x03
000e8a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	120; clock.c	BYTE      max = 32 - pos;  /*available space on the lcd*/
000e8c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e8e   0820     sublw	0x20               	SUBLW	0x20
000e90   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	121; clock.c	char       *d = (char*)&LCDText[pos];
000e92   6a06     clrf	0x6, 0              	CLRF	r0x06
000e94   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
000e96   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000e98   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
000e9a   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000e9c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e9e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000ea0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ea2   6e00     movwf	0, 0               	MOVWF	r0x00
000ea4   0e80     movlw	0x80               	MOVLW	0x80
000ea6   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	123; clock.c	size_t      n = (l < max) ? l : max;
000ea8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000eaa   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000eac   e302     bnc	0xeb2                	BNC	_00131_DS_
000eae   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
000eb0   f004
                                           _00131_DS_:
000eb2   6a05     clrf	0x5, 0              	CLRF	r0x05
                                           ;	.line	125; clock.c	if (n != 0)
000eb4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000eb6   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000eb8   e027     bz	0xf08                 	BZ	_00127_DS_
                                           _00123_DS_:
                                           ;	.line	126; clock.c	while (n-- != 0)*d++ = *s++;
000eba   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000ebc   f008
000ebe   c005     movff	0x5, 0x9           	MOVFF	r0x05, r0x09
000ec0   f009
000ec2   0eff     movlw	0xff               	MOVLW	0xff
000ec4   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
000ec6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000ec8   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
000eca   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000ecc   1009     iorwf	0x9, 0, 0          	IORWF	r0x09, W
000ece   e01c     bz	0xf08                 	BZ	_00127_DS_
000ed0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000ed2   ffe9
000ed4   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000ed6   fff3
000ed8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000eda   ec89     call	0x1712, 0           	CALL	__gptrget1
000edc   f00b
000ede   6e08     movwf	0x8, 0             	MOVWF	r0x08
000ee0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000ee2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ee4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000ee6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000ee8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000eea   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000eec   ffe5
000eee   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000ef0   ffe9
000ef2   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
000ef4   fff3
000ef6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000ef8   eca6     call	0x174c, 0           	CALL	__gptrput1
000efa   f00b
000efc   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000efe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f00   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
000f02   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000f04   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
000f06   d7d9     bra	0xeba                	BRA	_00123_DS_
                                           _00127_DS_:
                                           ;	.line	127; clock.c	LCDUpdate();
000f08   ec06     call	0xc, 0              	CALL	_LCDUpdate
000f0a   f000
000f0c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000f0e   f009
000f10   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000f12   f008
000f14   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000f16   f007
000f18   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000f1a   f006
000f1c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000f1e   f005
000f20   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000f22   f004
000f24   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000f26   f003
000f28   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000f2a   f002
000f2c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000f2e   f001
000f30   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f32   f000
000f34   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f36   ffd9
000f38   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_clock__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	78; clock.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
0006d2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0006d4   ffe5
0006d6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0006d8   ffd9
0006da   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0006dc   ffe5
0006de   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0006e0   ffe5
0006e2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0006e4   ffe5
0006e6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0006e8   ffe5
0006ea   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0006ec   ffe5
0006ee   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0006f0   ffe5
0006f2   0e02     movlw	0x2                	MOVLW	0x02
0006f4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0006f6   f000
0006f8   0e03     movlw	0x3                	MOVLW	0x03
0006fa   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0006fc   f001
0006fe   0e04     movlw	0x4                	MOVLW	0x04
000700   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000702   f002
                                           ;	.line	86; clock.c	ultoa(w, WDigit, radix);
000704   6a03     clrf	0x3, 0              	CLRF	r0x03
000706   6a04     clrf	0x4, 0              	CLRF	r0x04
000708   0e0a     movlw	0xa                	MOVLW	0x0a
00070a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00070c   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
00070e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000710   0e58     movlw	0x58               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
000712   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000714   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000716   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000718   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00071a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00071c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00071e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000720   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000722   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000724   ec63     call	0x8c6, 0            	CALL	_ultoa
000726   f004
000728   0e07     movlw	0x7                	MOVLW	0x07
00072a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	87; clock.c	for (j = 0; j < strlen((char*)WDigit); j++)
00072c   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00107_DS_:
00072e   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
000730   6e03     movwf	0x3, 0             	MOVWF	r0x03
000732   0e58     movlw	0x58               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
000734   6e02     movwf	0x2, 0             	MOVWF	r0x02
000736   0e80     movlw	0x80               	MOVLW	0x80
000738   6e04     movwf	0x4, 0             	MOVWF	r0x04
00073a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00073c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00073e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000740   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000742   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000746   ec12     call	0x1424, 0           	CALL	_strlen
000748   f00a
00074a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00074c   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
00074e   f003
000750   0e03     movlw	0x3                	MOVLW	0x03
000752   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000754   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
000756   f004
000758   6a05     clrf	0x5, 0              	CLRF	r0x05
00075a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00075c   0f80     addlw	0x80               	ADDLW	0x80
00075e   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
000760   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000762   0f80     addlw	0x80               	ADDLW	0x80
000764   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
000766   e102     bnz	0x76c                	BNZ	_00117_DS_
000768   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00076a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00117_DS_:
00076c   e21c     bc	0x7a6                 	BC	_00110_DS_
                                           ;	.line	89; clock.c	LCDText[LCDPos++] = WDigit[j];
00076e   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
000770   f002
000772   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000774   6a03     clrf	0x3, 0              	CLRF	r0x03
000776   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
000778   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00077a   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00077c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00077e   0e58     movlw	0x58               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
000780   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
000782   6e04     movwf	0x4, 0             	MOVWF	r0x04
000784   6a05     clrf	0x5, 0              	CLRF	r0x05
000786   0e0f     movlw	0xf                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
000788   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00078a   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00078c   ffe9
00078e   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
000790   ffea
000792   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
000794   f004
000796   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000798   ffe9
00079a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00079c   ffea
00079e   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
0007a0   ffef
                                           ;	.line	87; clock.c	for (j = 0; j < strlen((char*)WDigit); j++)
0007a2   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0007a4   d7c4     bra	0x72e                	BRA	_00107_DS_
                                           _00110_DS_:
                                           ;	.line	91; clock.c	if (LCDPos < 32u)
0007a6   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0007a8   f001
0007aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0007ac   0e00     movlw	0                  	MOVLW	0x00
0007ae   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0007b0   e102     bnz	0x7b6                	BNZ	_00118_DS_
0007b2   0e20     movlw	0x20               	MOVLW	0x20
0007b4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00118_DS_:
0007b6   e20b     bc	0x7ce                 	BC	_00106_DS_
                                           ;	.line	92; clock.c	LCDText[LCDPos] = 0;
0007b8   6a01     clrf	0x1, 0              	CLRF	r0x01
0007ba   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
0007bc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0007be   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0007c0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0007c2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0007c4   ffe9
0007c6   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0007c8   ffea
0007ca   0e00     movlw	0                  	MOVLW	0x00
0007cc   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00106_DS_:
                                           ;	.line	93; clock.c	LCDUpdate();
0007ce   ec06     call	0xc, 0              	CALL	_LCDUpdate
0007d0   f000
0007d2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0007d4   f005
0007d6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0007d8   f004
0007da   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0007dc   f003
0007de   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0007e0   f002
0007e2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0007e4   f001
0007e6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0007e8   f000
0007ea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0007ec   ffd9
0007ee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0007f0   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
0007f2   2020     addwfc	0x20, 0, 0        
0007f4   2020     addwfc	0x20, 0, 0        
0007f6   2020     addwfc	0x20, 0, 0        
0007f8   2020     addwfc	0x20, 0, 0        
0007fa   2020     addwfc	0x20, 0, 0        
0007fc   2020     addwfc	0x20, 0, 0        	DB	0x20, 0x20, 0x20, 0x20, 0x00
0007fe   2020     addwfc	0x20, 0, 0        
000800   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_1:
000802   0000     nop                      	DB	0x00
                                           ; ; Starting pCode block
                                           __str_2:
000804   5453     subfwb	0x53, 0, 0        	DB	0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x00
000806   5241     movf	0x41, 0x1, 0        
000808   5554     subfwb	0x54, 0, 0x1      
00080a   0050     dw	0x50  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_3:
00080c   4157     rrncf	0x57, 0, 0x1       	DB	0x57, 0x41, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4c
00080e   5449     subfwb	0x49, 0, 0        
000810   465f     rlncf	0x5f, 0x1, 0       
000812   524f     movf	0x4f, 0x1, 0        
000814   525f     movf	0x5f, 0x1, 0        
000816   4c45     dcfsnz	0x45, 0, 0        
000818   4145     rrncf	0x45, 0, 0x1       	DB	0x45, 0x41, 0x53, 0x45, 0x00
00081a   4553     rlncf	0x53, 0, 0x1       
00081c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_4:
00081e   4157     rrncf	0x57, 0, 0x1       	DB	0x57, 0x41, 0x49, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x00
000820   5449     subfwb	0x49, 0, 0        
000822   485f     infsnz	0x5f, 0, 0        
000824   554f     subfwb	0x4f, 0, 0x1      
000826   5352     movf	0x52, 0x1, 0x1      
000828   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_5:
00082a   4157     rrncf	0x57, 0, 0x1       	DB	0x57, 0x41, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x53, 0x00
00082c   5449     subfwb	0x49, 0, 0        
00082e   4d5f     dcfsnz	0x5f, 0, 0x1      
000830   4e49     dcfsnz	0x49, 0x1, 0      
000832   0053     dw	0x53  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_6:
000834   4157     rrncf	0x57, 0, 0x1       	DB	0x57, 0x41, 0x49, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x53, 0x00
000836   5449     subfwb	0x49, 0, 0        
000838   535f     movf	0x5f, 0x1, 0x1      
00083a   4345     rrncf	0x45, 0x1, 0x1     
00083c   0053     dw	0x53  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_7:
00083e   4553     rlncf	0x53, 0, 0x1       	DB	0x53, 0x45, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x00
000840   5f54     subwf	0x54, 0x1, 0x1     
000842   4954     infsnz	0x54, 0, 0x1      
000844   454d     rlncf	0x4d, 0, 0x1       
000846   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_8:
000848   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x00
00084a   5f43     subwf	0x43, 0x1, 0x1     
00084c   4f48     dcfsnz	0x48, 0x1, 0x1    
00084e   5255     movf	0x55, 0x1, 0        
000850   0053     dw	0x53  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_9:
000852   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x4d, 0x49, 0x4e, 0x53, 0x00
000854   5f43     subwf	0x43, 0x1, 0x1     
000856   494d     infsnz	0x4d, 0, 0x1      
000858   534e     movf	0x4e, 0x1, 0x1      
00085a   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_10:
00085c   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x53, 0x00
00085e   5f43     subwf	0x43, 0x1, 0x1     
000860   4553     rlncf	0x53, 0, 0x1       
000862   5343     movf	0x43, 0x1, 0x1      
000864   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_11:
000866   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x53, 0x5f, 0x32, 0x00
000868   5f43     subwf	0x43, 0x1, 0x1     
00086a   4553     rlncf	0x53, 0, 0x1       
00086c   5343     movf	0x43, 0x1, 0x1      
00086e   325f     rrcf	0x5f, 0x1, 0        
000870   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_12:
000872   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x4d, 0x49, 0x4e, 0x53, 0x5f, 0x32, 0x00
000874   5f43     subwf	0x43, 0x1, 0x1     
000876   494d     infsnz	0x4d, 0, 0x1      
000878   534e     movf	0x4e, 0x1, 0x1      
00087a   325f     rrcf	0x5f, 0x1, 0        
00087c   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_13:
00087e   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x32, 0x00
000880   5f43     subwf	0x43, 0x1, 0x1     
000882   4f48     dcfsnz	0x48, 0x1, 0x1    
000884   5255     movf	0x55, 0x1, 0        
000886   5f53     subwf	0x53, 0x1, 0x1     
000888   0032     dw	0x32  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_14:
00088a   4552     rlncf	0x52, 0, 0x1       	DB	0x52, 0x45, 0x53, 0x45, 0x54, 0x00
00088c   4553     rlncf	0x53, 0, 0x1       
00088e   0054     dw	0x54  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_15:
000890   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x5f, 0x57, 0x41
000892   5f43     subwf	0x43, 0x1, 0x1     
000894   4f48     dcfsnz	0x48, 0x1, 0x1    
000896   5255     movf	0x55, 0x1, 0        
000898   5f53     subwf	0x53, 0x1, 0x1     
00089a   4157     rrncf	0x57, 0, 0x1       
00089c   5449     subfwb	0x49, 0, 0        	DB	0x49, 0x54, 0x00
00089e   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_16:
0008a0   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x4d, 0x49, 0x4e, 0x53, 0x5f, 0x57, 0x41, 0x49
0008a2   5f43     subwf	0x43, 0x1, 0x1     
0008a4   494d     infsnz	0x4d, 0, 0x1      
0008a6   534e     movf	0x4e, 0x1, 0x1      
0008a8   575f     subfwb	0x5f, 0x1, 0x1    
0008aa   4941     infsnz	0x41, 0, 0x1      
0008ac   0054     dw	0x54  ;unknown opcode 	DB	0x54, 0x00
                                           ; ; Starting pCode block
                                           __str_17:
0008ae   4e49     dcfsnz	0x49, 0x1, 0      	DB	0x49, 0x4e, 0x43, 0x5f, 0x53, 0x45, 0x43, 0x53, 0x5f, 0x57, 0x41, 0x49
0008b0   5f43     subwf	0x43, 0x1, 0x1     
0008b2   4553     rlncf	0x53, 0, 0x1       
0008b4   5343     movf	0x43, 0x1, 0x1      
0008b6   575f     subfwb	0x5f, 0x1, 0x1    
0008b8   4941     infsnz	0x41, 0, 0x1      
0008ba   0054     dw	0x54  ;unknown opcode 	DB	0x54, 0x00
                                           ; ; Starting pCode block
                                           __str_18:
0008bc   4544     rlncf	0x44, 0, 0x1       	DB	0x44, 0x45, 0x42, 0x4f, 0x55, 0x4e, 0x43, 0x45, 0x00
0008be   4f42     dcfsnz	0x42, 0x1, 0x1    
0008c0   4e55     dcfsnz	0x55, 0x1, 0      
0008c2   4543     rlncf	0x43, 0, 0x1       
0008c4   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2256 (0x08d0) bytes ( 1.72%)
                                           ;           	 1128 (0x0468) words
                                           ; udata size:	   22 (0x0016) bytes ( 0.57%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 23 2016) (Mac OS X ppc)
                                           ; This file was generated Thu Nov 24 10:54:07 2016
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDInit
                                           	global _LCDUpdate
                                           	global _LCDErase
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_LCDBlocking_0	udata
                                           _LCDText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	392; TCPIP_Stack/LCDBlocking.c	void LCDErase(void)
0011b8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0011ba   ffe5
0011bc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0011be   ffd9
0011c0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011c2   ffe5
0011c4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0011c6   ffe5
0011c8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0011ca   ffe5
0011cc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0011ce   ffe5
0011d0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0011d2   ffe5
0011d4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0011d6   ffe5
0011d8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0011da   ffe5
0011dc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0011de   ffe5
                                           ;	.line	395; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);
0011e0   0e01     movlw	0x1                	MOVLW	0x01
0011e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011e4   0e00     movlw	0                  	MOVLW	0x00
0011e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011e8   ec00     call	0x1600, 0           	CALL	_LCDWrite
0011ea   f00b
0011ec   0e02     movlw	0x2                	MOVLW	0x02
0011ee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	396; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
0011f0   0e48     movlw	0x48               	MOVLW	0x48
0011f2   6e00     movwf	0, 0               	MOVWF	r0x00
0011f4   0e0d     movlw	0xd                	MOVLW	0x0d
0011f6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0011f8   6a02     clrf	0x2, 0              	CLRF	r0x02
0011fa   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00305_DS_:
0011fc   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0011fe   f004
001200   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001202   f005
001204   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
001206   f006
001208   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00120a   f007
00120c   0eff     movlw	0xff               	MOVLW	0xff
00120e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001210   0eff     movlw	0xff               	MOVLW	0xff
001212   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001214   0eff     movlw	0xff               	MOVLW	0xff
001216   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001218   0eff     movlw	0xff               	MOVLW	0xff
00121a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00121c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00121e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
001220   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001222   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001224   e1eb     bnz	0x11fc               	BNZ	_00305_DS_
                                           ;	.line	399; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', 32);
001226   0e00     movlw	0                  	MOVLW	0x00
001228   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00122a   0e20     movlw	0x20               	MOVLW	0x20
00122c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00122e   0e20     movlw	0x20               	MOVLW	0x20
001230   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001232   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
001234   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001236   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
001238   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00123a   ec13     call	0x1026, 0           	CALL	_memset
00123c   f008
00123e   0e05     movlw	0x5                	MOVLW	0x05
001240   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001242   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001244   f007
001246   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001248   f006
00124a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00124c   f005
00124e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001250   f004
001252   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001254   f003
001256   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001258   f002
00125a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00125c   f001
00125e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001260   f000
001262   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001264   ffd9
001266   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	332; TCPIP_Stack/LCDBlocking.c	void LCDUpdate(void)
00000c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00000e   ffe5
000010   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000012   ffd9
000014   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000016   ffe5
000018   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00001a   ffe5
00001c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00001e   ffe5
000020   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000022   ffe5
000024   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000026   ffe5
000028   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00002a   ffe5
00002c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00002e   ffe5
000030   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000032   ffe5
000034   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000036   ffe5
                                           ;	.line	337; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x02);
000038   0e02     movlw	0x2                	MOVLW	0x02
00003a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00003c   0e00     movlw	0                  	MOVLW	0x00
00003e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000040   ec00     call	0x1600, 0           	CALL	_LCDWrite
000042   f00b
000044   0e02     movlw	0x2                	MOVLW	0x02
000046   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	338; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000048   0e48     movlw	0x48               	MOVLW	0x48
00004a   6e00     movwf	0, 0               	MOVWF	r0x00
00004c   0e0d     movlw	0xd                	MOVLW	0x0d
00004e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000050   6a02     clrf	0x2, 0              	CLRF	r0x02
000052   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00225_DS_:
000054   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000056   f004
000058   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00005a   f005
00005c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00005e   f006
000060   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000062   f007
000064   0eff     movlw	0xff               	MOVLW	0xff
000066   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000068   0eff     movlw	0xff               	MOVLW	0xff
00006a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00006c   0eff     movlw	0xff               	MOVLW	0xff
00006e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000070   0eff     movlw	0xff               	MOVLW	0xff
000072   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000074   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000076   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000078   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00007a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00007c   e1eb     bnz	0x54                 	BNZ	_00225_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00007e   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00257_DS_:
000080   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000082   f001
000084   6a02     clrf	0x2, 0              	CLRF	r0x02
000086   0e00     movlw	0                  	MOVLW	0x00
000088   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00008a   e102     bnz	0x90                 	BNZ	_00297_DS_
00008c   0e10     movlw	0x10               	MOVLW	0x10
00008e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00297_DS_:
000090   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000092   d057     bra	0x142                	BRA	_00260_DS_
                                           ;	.line	345; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
000094   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
000096   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000098   6e01     movwf	0x1, 0             	MOVWF	r0x01
00009a   6a02     clrf	0x2, 0              	CLRF	r0x02
00009c   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
00009e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0000a0   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0000a2   ffe9
0000a4   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0000a6   ffea
0000a8   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0000aa   f001
0000ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000ae   e119     bnz	0xe2                 	BNZ	_00232_DS_
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0000b0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0000b2   f001
                                           _00253_DS_:
0000b4   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0000b6   f002
0000b8   6a03     clrf	0x3, 0              	CLRF	r0x03
0000ba   0e00     movlw	0                  	MOVLW	0x00
0000bc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0000be   e102     bnz	0xc4                 	BNZ	_00298_DS_
0000c0   0e10     movlw	0x10               	MOVLW	0x10
0000c2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00298_DS_:
0000c4   e20e     bc	0xe2                  	BC	_00232_DS_
                                           ;	.line	349; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0000c6   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
0000c8   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0000ca   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000cc   6a03     clrf	0x3, 0              	CLRF	r0x03
0000ce   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0000d0   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0000d2   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0000d4   ffe9
0000d6   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0000d8   ffea
0000da   0e20     movlw	0x20               	MOVLW	0x20
0000dc   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	347; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 16u; j++)
0000de   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0000e0   d7e9     bra	0xb4                 	BRA	_00253_DS_
                                           _00232_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0000e2   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
0000e4   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0000e6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000e8   6a02     clrf	0x2, 0              	CLRF	r0x02
0000ea   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0000ec   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0000ee   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0000f0   ffe9
0000f2   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0000f4   ffea
0000f6   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0000f8   f001
0000fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000fe   0e01     movlw	0x1                	MOVLW	0x01
000100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000102   ec00     call	0x1600, 0           	CALL	_LCDWrite
000104   f00b
000106   0e02     movlw	0x2                	MOVLW	0x02
000108   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	353; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00010a   0e55     movlw	0x55               	MOVLW	0x55
00010c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00010e   6a02     clrf	0x2, 0              	CLRF	r0x02
000110   6a03     clrf	0x3, 0              	CLRF	r0x03
000112   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00233_DS_:
000114   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000116   f005
000118   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00011a   f006
00011c   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00011e   f007
000120   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000122   f008
000124   0eff     movlw	0xff               	MOVLW	0xff
000126   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000128   0eff     movlw	0xff               	MOVLW	0xff
00012a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00012c   0eff     movlw	0xff               	MOVLW	0xff
00012e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000130   0eff     movlw	0xff               	MOVLW	0xff
000132   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000134   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000136   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000138   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00013a   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
00013c   e1eb     bnz	0x114                	BNZ	_00233_DS_
                                           ;	.line	341; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 16u; i++)
00013e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000140   d79f     bra	0x80                 	BRA	_00257_DS_
                                           _00260_DS_:
                                           ;	.line	357; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0xC0);
000142   0ec0     movlw	0xc0               	MOVLW	0xc0
000144   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000146   0e00     movlw	0                  	MOVLW	0x00
000148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014a   ec00     call	0x1600, 0           	CALL	_LCDWrite
00014c   f00b
00014e   0e02     movlw	0x2                	MOVLW	0x02
000150   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	358; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000152   0e55     movlw	0x55               	MOVLW	0x55
000154   6e00     movwf	0, 0               	MOVWF	r0x00
000156   6a01     clrf	0x1, 0              	CLRF	r0x01
000158   6a02     clrf	0x2, 0              	CLRF	r0x02
00015a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00239_DS_:
00015c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00015e   f004
000160   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000162   f005
000164   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000166   f006
000168   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00016a   f007
00016c   0eff     movlw	0xff               	MOVLW	0xff
00016e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000170   0eff     movlw	0xff               	MOVLW	0xff
000172   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000174   0eff     movlw	0xff               	MOVLW	0xff
000176   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000178   0eff     movlw	0xff               	MOVLW	0xff
00017a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00017c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00017e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000180   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000182   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000184   e1eb     bnz	0x15c                	BNZ	_00239_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
000186   0e10     movlw	0x10               	MOVLW	0x10
000188   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00265_DS_:
00018a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00018c   f001
00018e   6a02     clrf	0x2, 0              	CLRF	r0x02
000190   0e00     movlw	0                  	MOVLW	0x00
000192   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000194   e102     bnz	0x19a                	BNZ	_00299_DS_
000196   0e20     movlw	0x20               	MOVLW	0x20
000198   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00299_DS_:
00019a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00019c   d057     bra	0x24c                	BRA	_00269_DS_
                                           ;	.line	365; TCPIP_Stack/LCDBlocking.c	if(LCDText[i] == 0u)
00019e   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
0001a0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0001a2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001a4   6a02     clrf	0x2, 0              	CLRF	r0x02
0001a6   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0001a8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0001aa   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0001ac   ffe9
0001ae   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0001b0   ffea
0001b2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0001b4   f001
0001b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001b8   e119     bnz	0x1ec                	BNZ	_00246_DS_
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0001ba   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0001bc   f001
                                           _00261_DS_:
0001be   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
0001c0   f002
0001c2   6a03     clrf	0x3, 0              	CLRF	r0x03
0001c4   0e00     movlw	0                  	MOVLW	0x00
0001c6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0001c8   e102     bnz	0x1ce                	BNZ	_00300_DS_
0001ca   0e20     movlw	0x20               	MOVLW	0x20
0001cc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00300_DS_:
0001ce   e20e     bc	0x1ec                 	BC	_00246_DS_
                                           ;	.line	369; TCPIP_Stack/LCDBlocking.c	LCDText[j] = ' ';
0001d0   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
0001d2   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0001d4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001d6   6a03     clrf	0x3, 0              	CLRF	r0x03
0001d8   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0001da   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0001dc   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0001de   ffe9
0001e0   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0001e2   ffea
0001e4   0e20     movlw	0x20               	MOVLW	0x20
0001e6   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	367; TCPIP_Stack/LCDBlocking.c	for(j=i; j < 32u; j++)
0001e8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0001ea   d7e9     bra	0x1be                	BRA	_00261_DS_
                                           _00246_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDBlocking.c	LCDWrite(1, LCDText[i]);
0001ec   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
0001ee   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0001f0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0001f2   6a02     clrf	0x2, 0              	CLRF	r0x02
0001f4   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0001f6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0001f8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0001fa   ffe9
0001fc   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0001fe   ffea
000200   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
000202   f001
000204   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000206   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000208   0e01     movlw	0x1                	MOVLW	0x01
00020a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00020c   ec00     call	0x1600, 0           	CALL	_LCDWrite
00020e   f00b
000210   0e02     movlw	0x2                	MOVLW	0x02
000212   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
000214   0e55     movlw	0x55               	MOVLW	0x55
000216   6e01     movwf	0x1, 0             	MOVWF	r0x01
000218   6a02     clrf	0x2, 0              	CLRF	r0x02
00021a   6a03     clrf	0x3, 0              	CLRF	r0x03
00021c   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00247_DS_:
00021e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000220   f005
000222   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000224   f006
000226   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000228   f007
00022a   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00022c   f008
00022e   0eff     movlw	0xff               	MOVLW	0xff
000230   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000232   0eff     movlw	0xff               	MOVLW	0xff
000234   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000236   0eff     movlw	0xff               	MOVLW	0xff
000238   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00023a   0eff     movlw	0xff               	MOVLW	0xff
00023c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00023e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000240   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000242   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000244   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000246   e1eb     bnz	0x21e                	BNZ	_00247_DS_
                                           ;	.line	361; TCPIP_Stack/LCDBlocking.c	for(i = 16; i < 32u; i++)
000248   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00024a   d79f     bra	0x18a                	BRA	_00265_DS_
                                           _00269_DS_:
00024c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00024e   f008
000250   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000252   f007
000254   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000256   f006
000258   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00025a   f005
00025c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00025e   f004
000260   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000262   f003
000264   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000266   f002
000268   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00026a   f001
00026c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00026e   f000
000270   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000272   ffd9
000274   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	207; TCPIP_Stack/LCDBlocking.c	void LCDInit(void)
000276   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000278   ffe5
00027a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00027c   ffd9
00027e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000280   ffe5
000282   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000284   ffe5
000286   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000288   ffe5
00028a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00028c   ffe5
00028e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000290   ffe5
000292   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000294   ffe5
000296   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000298   ffe5
00029a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00029c   ffe5
00029e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0002a0   ffe5
                                           ;	.line	211; TCPIP_Stack/LCDBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
0002a2   0e00     movlw	0                  	MOVLW	0x00
0002a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002a6   0e20     movlw	0x20               	MOVLW	0x20
0002a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002aa   0e20     movlw	0x20               	MOVLW	0x20
0002ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ae   0e0f     movlw	0xf                	MOVLW	HIGH(_LCDText)
0002b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002b2   0e37     movlw	0x37               	MOVLW	LOW(_LCDText)
0002b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002b6   ec13     call	0x1026, 0           	CALL	_memset
0002b8   f008
0002ba   0e05     movlw	0x5                	MOVLW	0x05
0002bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002be   010f     movlb	0xf                	BANKSEL	(_LCDText + 32)
                                           ;	.line	212; TCPIP_Stack/LCDBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
0002c0   6b57     clrf	0x57, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	215; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
0002c2   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	216; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
0002c4   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	220; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
0002c6   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	233; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
0002c8   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	234; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
0002ca   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	235; TCPIP_Stack/LCDBlocking.c	LCD_E_TRIS = 0;
0002cc   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	239; TCPIP_Stack/LCDBlocking.c	DelayMs(40);
0002ce   0ea0     movlw	0xa0               	MOVLW	0xa0
0002d0   6e00     movwf	0, 0               	MOVWF	r0x00
0002d2   0e09     movlw	0x9                	MOVLW	0x09
0002d4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0002d6   0e01     movlw	0x1                	MOVLW	0x01
0002d8   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002da   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00143_DS_:
0002dc   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0002de   f004
0002e0   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0002e2   f005
0002e4   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0002e6   f006
0002e8   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0002ea   f007
0002ec   0eff     movlw	0xff               	MOVLW	0xff
0002ee   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0002f0   0eff     movlw	0xff               	MOVLW	0xff
0002f2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0002f4   0eff     movlw	0xff               	MOVLW	0xff
0002f6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0002f8   0eff     movlw	0xff               	MOVLW	0xff
0002fa   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0002fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002fe   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000300   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000302   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000304   e1eb     bnz	0x2dc                	BNZ	_00143_DS_
                                           ;	.line	247; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = 0;
000306   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	249; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = 0x03;
000308   0e03     movlw	0x3                	MOVLW	0x03
00030a   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
00030c   0000     nop                      	nop 
00030e   0000     nop                      	nop 
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
000310   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00191_DS_:
000312   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000314   f001
000316   6a02     clrf	0x2, 0              	CLRF	r0x02
000318   0e00     movlw	0                  	MOVLW	0x00
00031a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00031c   e102     bnz	0x322                	BNZ	_00220_DS_
00031e   0e03     movlw	0x3                	MOVLW	0x03
000320   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00220_DS_:
000322   e239     bc	0x396                 	BC	_00194_DS_
                                           ;	.line	266; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
000324   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	267; TCPIP_Stack/LCDBlocking.c	Delay10us(1);	       	// Wait E Pulse width time (min 230ns)
000326   0e11     movlw	0x11               	MOVLW	0x11
000328   6e01     movwf	0x1, 0             	MOVWF	r0x01
00032a   6a02     clrf	0x2, 0              	CLRF	r0x02
00032c   6a03     clrf	0x3, 0              	CLRF	r0x03
00032e   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00155_DS_:
000330   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000332   f005
000334   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000336   f006
000338   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00033a   f007
00033c   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
00033e   f008
000340   0eff     movlw	0xff               	MOVLW	0xff
000342   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000344   0eff     movlw	0xff               	MOVLW	0xff
000346   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000348   0eff     movlw	0xff               	MOVLW	0xff
00034a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00034c   0eff     movlw	0xff               	MOVLW	0xff
00034e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000350   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000352   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
000354   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000356   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000358   e1eb     bnz	0x330                	BNZ	_00155_DS_
                                           ;	.line	268; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
00035a   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	269; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
00035c   0e48     movlw	0x48               	MOVLW	0x48
00035e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000360   0e0d     movlw	0xd                	MOVLW	0x0d
000362   6e02     movwf	0x2, 0             	MOVWF	r0x02
000364   6a03     clrf	0x3, 0              	CLRF	r0x03
000366   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00161_DS_:
000368   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00036a   f005
00036c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
00036e   f006
000370   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000372   f007
000374   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
000376   f008
000378   0eff     movlw	0xff               	MOVLW	0xff
00037a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00037c   0eff     movlw	0xff               	MOVLW	0xff
00037e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000380   0eff     movlw	0xff               	MOVLW	0xff
000382   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000384   0eff     movlw	0xff               	MOVLW	0xff
000386   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000388   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00038a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00038c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00038e   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
000390   e1eb     bnz	0x368                	BNZ	_00161_DS_
                                           ;	.line	264; TCPIP_Stack/LCDBlocking.c	for(i = 0; i < 3u; i++)
000392   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000394   d7be     bra	0x312                	BRA	_00191_DS_
                                           _00194_DS_:
                                           ;	.line	295; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x38);
000396   0e38     movlw	0x38               	MOVLW	0x38
000398   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00039a   0e00     movlw	0                  	MOVLW	0x00
00039c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00039e   ec00     call	0x1600, 0           	CALL	_LCDWrite
0003a0   f00b
0003a2   0e02     movlw	0x2                	MOVLW	0x02
0003a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	297; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0003a6   0e55     movlw	0x55               	MOVLW	0x55
0003a8   6e00     movwf	0, 0               	MOVWF	r0x00
0003aa   6a01     clrf	0x1, 0              	CLRF	r0x01
0003ac   6a02     clrf	0x2, 0              	CLRF	r0x02
0003ae   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00167_DS_:
0003b0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0003b2   f004
0003b4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0003b6   f005
0003b8   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0003ba   f006
0003bc   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0003be   f007
0003c0   0eff     movlw	0xff               	MOVLW	0xff
0003c2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0003c4   0eff     movlw	0xff               	MOVLW	0xff
0003c6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0003c8   0eff     movlw	0xff               	MOVLW	0xff
0003ca   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0003cc   0eff     movlw	0xff               	MOVLW	0xff
0003ce   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0003d0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003d2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0003d4   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0003d6   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0003d8   e1eb     bnz	0x3b0                	BNZ	_00167_DS_
                                           ;	.line	300; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0003da   0e06     movlw	0x6                	MOVLW	0x06
0003dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003de   0e00     movlw	0                  	MOVLW	0x00
0003e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003e2   ec00     call	0x1600, 0           	CALL	_LCDWrite
0003e4   f00b
0003e6   0e02     movlw	0x2                	MOVLW	0x02
0003e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
0003ea   0e55     movlw	0x55               	MOVLW	0x55
0003ec   6e00     movwf	0, 0               	MOVWF	r0x00
0003ee   6a01     clrf	0x1, 0              	CLRF	r0x01
0003f0   6a02     clrf	0x2, 0              	CLRF	r0x02
0003f2   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00173_DS_:
0003f4   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0003f6   f004
0003f8   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0003fa   f005
0003fc   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0003fe   f006
000400   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000402   f007
000404   0eff     movlw	0xff               	MOVLW	0xff
000406   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000408   0eff     movlw	0xff               	MOVLW	0xff
00040a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00040c   0eff     movlw	0xff               	MOVLW	0xff
00040e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000410   0eff     movlw	0xff               	MOVLW	0xff
000412   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000414   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000416   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
000418   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00041a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00041c   e1eb     bnz	0x3f4                	BNZ	_00173_DS_
                                           ;	.line	304; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x0C);	// Turn display on, no cusor, no cursor blink
00041e   0e0c     movlw	0xc                	MOVLW	0x0c
000420   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000422   0e00     movlw	0                  	MOVLW	0x00
000424   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000426   ec00     call	0x1600, 0           	CALL	_LCDWrite
000428   f00b
00042a   0e02     movlw	0x2                	MOVLW	0x02
00042c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	305; TCPIP_Stack/LCDBlocking.c	Delay10us(5);
00042e   0e55     movlw	0x55               	MOVLW	0x55
000430   6e00     movwf	0, 0               	MOVWF	r0x00
000432   6a01     clrf	0x1, 0              	CLRF	r0x01
000434   6a02     clrf	0x2, 0              	CLRF	r0x02
000436   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00179_DS_:
000438   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00043a   f004
00043c   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00043e   f005
000440   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000442   f006
000444   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
000446   f007
000448   0eff     movlw	0xff               	MOVLW	0xff
00044a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00044c   0eff     movlw	0xff               	MOVLW	0xff
00044e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000450   0eff     movlw	0xff               	MOVLW	0xff
000452   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000454   0eff     movlw	0xff               	MOVLW	0xff
000456   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000458   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00045a   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00045c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00045e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000460   e1eb     bnz	0x438                	BNZ	_00179_DS_
                                           ;	.line	308; TCPIP_Stack/LCDBlocking.c	LCDWrite(0, 0x01);	
000462   0e01     movlw	0x1                	MOVLW	0x01
000464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000466   0e00     movlw	0                  	MOVLW	0x00
000468   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00046a   ec00     call	0x1600, 0           	CALL	_LCDWrite
00046c   f00b
00046e   0e02     movlw	0x2                	MOVLW	0x02
000470   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	309; TCPIP_Stack/LCDBlocking.c	DelayMs(2);
000472   0e48     movlw	0x48               	MOVLW	0x48
000474   6e00     movwf	0, 0               	MOVWF	r0x00
000476   0e0d     movlw	0xd                	MOVLW	0x0d
000478   6e01     movwf	0x1, 0             	MOVWF	r0x01
00047a   6a02     clrf	0x2, 0              	CLRF	r0x02
00047c   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00185_DS_:
00047e   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000480   f004
000482   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000484   f005
000486   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
000488   f006
00048a   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00048c   f007
00048e   0eff     movlw	0xff               	MOVLW	0xff
000490   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000492   0eff     movlw	0xff               	MOVLW	0xff
000494   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000496   0eff     movlw	0xff               	MOVLW	0xff
000498   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00049a   0eff     movlw	0xff               	MOVLW	0xff
00049c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00049e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004a0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0004a2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0004a4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0004a6   e1eb     bnz	0x47e                	BNZ	_00185_DS_
0004a8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0004aa   f008
0004ac   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0004ae   f007
0004b0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0004b2   f006
0004b4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0004b6   f005
0004b8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0004ba   f004
0004bc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0004be   f003
0004c0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0004c2   f002
0004c4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0004c6   f001
0004c8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0004ca   f000
0004cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0004ce   ffd9
0004d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	94; TCPIP_Stack/LCDBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
001600   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001602   ffe5
001604   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001606   ffd9
001608   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00160a   ffe5
00160c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00160e   ffe5
001610   0e02     movlw	0x2                	MOVLW	0x02
001612   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001614   f000
001616   0e03     movlw	0x3                	MOVLW	0x03
001618   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00161a   f001
                                           ;	.line	97; TCPIP_Stack/LCDBlocking.c	LCD_DATA_TRIS = 0x00;
00161c   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	110; TCPIP_Stack/LCDBlocking.c	LCD_RS_TRIS = 0;
00161e   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	111; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_TRIS = 0;
001620   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	112; TCPIP_Stack/LCDBlocking.c	LCD_RD_WR_IO = 0;
001622   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	113; TCPIP_Stack/LCDBlocking.c	LCD_RS_IO = RS;
001624   5000     movf	0, 0, 0             	MOVF	r0x00, W
001626   0b01     andlw	0x1                	ANDLW	0x01
001628   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00162a   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
00162c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00162e   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
001630   0bfb     andlw	0xfb               	ANDLW	0xfb
001632   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
001634   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	140; TCPIP_Stack/LCDBlocking.c	LCD_DATA_IO = Data;
001636   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
001638   ff8d
00163a   0000     nop                      	nop 
00163c   0000     nop                      	nop 
                                           ;	.line	155; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 1;
00163e   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
001640   0000     nop                      	nop 
001642   0000     nop                      	nop 
001644   0000     nop                      	nop 
001646   0000     nop                      	nop 
001648   0000     nop                      	nop 
00164a   0000     nop                      	nop 
00164c   0000     nop                      	nop 
00164e   0000     nop                      	nop 
001650   0000     nop                      	nop 
                                           ;	.line	165; TCPIP_Stack/LCDBlocking.c	LCD_E_IO = 0;
001652   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
001654   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001656   f001
001658   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00165a   f000
00165c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00165e   ffd9
001660   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   33 (0x0021) bytes ( 0.86%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
